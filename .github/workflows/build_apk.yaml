name: 构建 APK

on:
  workflow_dispatch:
    inputs:
      python-version:
        description: '要使用的 Python 版本'
        default: '3.10'
      work-dir:
        default: '.'
        description: '工作目录'
      build-type:
        description: '构建类型（调试版或发布版）'
        required: true
        default: '发布版'
      clean-cache:
        description: '构建前清理缓存'
        default: 'false'
        type: boolean

jobs:
  build-apk:
    runs-on: ubuntu-latest

    env:
      ANDROID_SDK_ROOT: $HOME/android-sdk

    steps:
      - name: 检出代码
        uses: actions/checkout@v3

      - name: 设置 Python 环境
        uses: actions/setup-python@v5
        with:
          architecture: x64
          python-version: ${{ inputs.python-version }}

      - name: 设置 Gradle 所需的 Java 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'  # 也可以是 'zulu', 'liberica' 等
          java-version: '17'

      - name: 设置 JAVA_HOME 环境变量
        run: |
          echo "JAVA_HOME=$JAVA_HOME" >> $GITHUB_ENV
        shell: bash

      - name: 准备虚拟环境
        run: |
          python -m venv venv
          source venv/bin/activate
          echo "使用 Python 版本: $(python --version)"
        shell: bash

      - name: 安装系统依赖
        run: |
          sudo apt update
          sudo apt install -y git zip unzip openjdk-17-jdk ccache build-essential libffi-dev libssl-dev wget autoconf libtool pkg-config zlib1g-dev libncurses5-dev libncursesw5-dev libtinfo5 cmake
        shell: bash

      - name: 下载并安装 Android 命令行工具
        run: |
          mkdir -p $ANDROID_SDK_ROOT/cmdline-tools
          cd $ANDROID_SDK_ROOT/cmdline-tools
          wget https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip -O cmdline-tools.zip
          unzip cmdline-tools.zip
          rm cmdline-tools.zip
          mv cmdline-tools latest
          chmod +x latest/bin/sdkmanager
        shell: bash

      - name: 设置 Android SDK 环境变量
        run: |
          echo "ANDROID_SDK_ROOT=$ANDROID_SDK_ROOT" >> $GITHUB_ENV
          echo "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin" >> $GITHUB_PATH
          echo "$ANDROID_SDK_ROOT/platform-tools" >> $GITHUB_PATH
        shell: bash

      - name: 确认命令行工具目录结构
        run: |
          ls -l $ANDROID_SDK_ROOT/cmdline-tools
          ls -l $ANDROID_SDK_ROOT/cmdline-tools/latest
          ls -l $ANDROID_SDK_ROOT/cmdline-tools/latest/bin
        shell: bash

      - name: 接受 Android SDK 许可证并安装 SDK 组件
        run: |
          yes | sdkmanager --sdk_root=$ANDROID_SDK_ROOT --licenses
          sdkmanager --sdk_root=$ANDROID_SDK_ROOT "平台工具" "平台;android-33" "构建工具;33.0.0"
        shell: bash

      - name: 安装并升级依赖
        run: |
          source venv/bin/activate
          export PATH=$PATH:~/.local/bin/
          python -m pip install --upgrade Cython==0.29.33 buildozer
        shell: bash

      - name: 如果存在 requirements.txt 则安装其中的依赖
        run: |
          source venv/bin/activate
          if [ -f requirements.txt ]; then
            python -m pip install -r requirements.txt
          fi
        shell: bash

      - name: 列出项目目录内容
        run: ls -lR
        shell: bash

      - name: 显示 buildozer.spec 内容
        run: cat buildozer.spec || echo "buildozer.spec 文件未找到"
        shell: bash

      - name: 如果配置文件存在则跳过 buildozer 初始化
        run: echo "buildozer.spec 已存在，跳过初始化"
        shell: bash

      - name: 如果请求则清理构建缓存
        if: inputs.clean-cache == 'true'
        run: |
          source venv/bin/activate
          buildozer android clean
        shell: bash

      - name: 使用 Buildozer 构建 APK
        run: |
          source venv/bin/activate
          buildozer android ${{ inputs.build-type }}
        shell: bash

      - name: 上传 APK 构建产物
        uses: actions/upload-artifact@v4
        with:
          name: worktime_apk
          path: bin/*.apk

      - name: 如果存在则上传构建日志
        uses: actions/upload-artifact@v4
        with:
          name: build_logs
          path: ./.buildozer/android/platform/build/build.log
