name: Build APK

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # 允许手动触发构建
    inputs:
      release_type:
        description: '构建类型'
        required: true
        default: 'debug'
        type: choice
        options:
          - debug
          - release

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
    - name: 步骤 1/8 - 检出代码
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # 获取完整提交历史

    - name: 步骤 2/8 - 设置 Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'

    - name: 步骤 3/8 - 缓存依赖
      uses: actions/cache@v4
      with:
        path: |
          ~/.buildozer
          ~/.cache/pip
        key: ${{ runner.os }}-buildozer-${{ hashFiles('buildozer.spec') }}
        restore-keys: |
          ${{ runner.os }}-buildozer-

    - name: 步骤 4/8 - 安装 Buildozer
      run: |
        python -m pip install --upgrade pip
        pip install buildozer cython

    - name: 步骤 5/8 - 设置 Java
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '11'

    - name: 步骤 6/8 - 安装 Android SDK
      uses: malinskiy/action-android/install-sdk@release/0.1.6

    - name: 步骤 7/8 - 配置 Buildozer
      run: |
        # 初始化配置（如果不存在）
        if [ ! -f buildozer.spec ]; then
          buildozer init
        fi
        
        # 更新应用信息
        sed -i 's/title = My Application/title = 工时价格Excel生成器/g' buildozer.spec
        sed -i 's/package.name = myapp/package.name = gzexcel/g' buildozer.spec
        sed -i 's/package.domain = org.test/package.domain = com.example/g' buildozer.spec
        sed -i 's/requirements = python3,kivy/requirements = python3,kivy,kivymd,pandas,openpyxl/g' buildozer.spec
        sed -i 's/source.main = main.py/source.main = gz.py/g' buildozer.spec
        
        # 根据输入类型设置构建参数
        if [ "${{ github.event.inputs.release_type }}" == "release" ]; then
          echo "配置发布版本构建..."
          sed -i '/android.permissions =/c\android.permissions = INTERNET, WRITE_EXTERNAL_STORAGE, READ_EXTERNAL_STORAGE' buildozer.spec
          echo "android.keystore = True" >> buildozer.spec
          echo "android.keystore.password = \$ENV{KEYSTORE_PASSWORD}" >> buildozer.spec
          echo "android.keystore.alias = \$ENV{KEY_ALIAS}" >> buildozer.spec
          echo "android.keystore.alias.password = \$ENV{KEY_PASSWORD}" >> buildozer.spec
        else
          echo "配置调试版本构建..."
        fi

    - name: 步骤 8/8 - 构建 APK
      env:
        KEYSTORE_BASE64: ${{ secrets.KEYSTORE_BASE64 }}
        KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
        KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
        KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
      run: |
        # 解码密钥库（仅用于发布版本）
        if [ "${{ github.event.inputs.release_type }}" == "release" ]; then
          echo "准备签名密钥..."
          echo "$KEYSTORE_BASE64" | base64 -d > release.keystore
          mkdir -p ~/.buildozer/android/platform/
          mv release.keystore ~/.buildozer/android/platform/
        fi
        
        # 设置内存限制
        export GRADLE_OPTS="-Xmx4g -Xms1g"
        
        # 根据输入类型选择构建命令
        if [ "${{ github.event.inputs.release_type }}" == "release" ]; then
          echo "开始构建签名 APK..."
          buildozer -v android release
        else
          echo "开始构建调试 APK..."
          buildozer -v android debug
        fi

    - name: 输出构建结果
      id: output
      run: |
        # 获取 APK 路径
        APK_PATH=$(find bin -name "*-${{ github.event.inputs.release_type }}.apk" | head -1)
        echo "APK_PATH=$APK_PATH" >> $GITHUB_ENV
        
        # 获取版本信息
        VERSION=$(grep "version = " buildozer.spec | cut -d'=' -f2 | tr -d ' ')
        echo "VERSION=${VERSION:-unknown}" >> $GITHUB_ENV
        
        # 获取提交信息
        COMMIT_MSG=$(git log -1 --pretty=%B)
        echo "COMMIT_MSG=$COMMIT_MSG" >> $GITHUB_ENV

    - name: 上传 APK 构建产物
      uses: actions/upload-artifact@v4
      with:
        name: 工时价格Excel生成器_v${{ env.VERSION }}_${{ github.sha }}
        path: ${{ env.APK_PATH }}
        retention-days: 30

    - name: 构建完成摘要
      run: |
        echo "========================================"
        echo " 构建完成!"
        echo "----------------------------------------"
        echo " 构建类型: ${{ github.event.inputs.release_type }}"
        echo " 版本号: v${{ env.VERSION }}"
        echo " 提交哈希: ${{ github.sha }}"
        echo " 提交信息: ${{ env.COMMIT_MSG }}"
        echo " APK 路径: ${{ env.APK_PATH }}"
        echo "========================================"
