name: 构建APK

on:
  workflow_dispatch:
    inputs:
      build-type:
        description: '构建类型（debug或release）'
        required: true
        default: 'release'

jobs:
  build-apk:
    runs-on: ubuntu-latest

    env:
      ANDROID_SDK_ROOT: $HOME/android-sdk

    steps:
    - name: 检出代码
      uses: actions/checkout@v3

    - name: 配置Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: 安装系统依赖
      run: |
        sudo apt update
        sudo apt install -y zip unzip openjdk-17-jdk ccache build-essential libffi-dev libssl-dev wget

    - name: 更新Autoconf并运行autoupdate
      run: |
        sudo apt-get update
        sudo apt-get install -y autoconf
        cd ${{ github.workspace }}/.buildozer/android/platform/build-armeabi-v7a_arm64-v8a/build/other_builds/libffi/armeabi-v7a__ndk_target_29/libffi
        autoupdate
        autoreconf -i
      shell: bash

    - name: 下载并安装Android命令行工具
      run: |
        mkdir -p $ANDROID_SDK_ROOT/cmdline-tools
        cd $ANDROID_SDK_ROOT/cmdline-tools
        wget https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip -O cmdline-tools.zip
        unzip cmdline-tools.zip
        rm cmdline-tools.zip
        # cmdline-tools解压后会有一个cmdline-tools文件夹，改名为latest
        mv cmdline-tools latest
        # 确保sdkmanager可执行
        chmod +x latest/bin/sdkmanager
      shell: bash

    - name: 设置Android SDK的环境变量
      run: |
        echo "ANDROID_SDK_ROOT=$ANDROID_SDK_ROOT" >> $GITHUB_ENV
        echo "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin" >> $GITHUB_PATH
        echo "$ANDROID_SDK_ROOT/platform-tools" >> $GITHUB_PATH

    - name: 确认cmdline-tools目录结构
      run: |
        ls -l $ANDROID_SDK_ROOT/cmdline-tools
        ls -l $ANDROID_SDK_ROOT/cmdline-tools/latest
        ls -l $ANDROID_SDK_ROOT/cmdline-tools/latest/bin

    - name: 接受Android SDK许可并安装SDK组件
      run: |
        yes | sdkmanager --sdk_root=$ANDROID_SDK_ROOT --licenses
        sdkmanager --sdk_root=$ANDROID_SDK_ROOT "platform-tools" "platforms;android-33" "build-tools;33.0.0"

    - name: 安装Buildozer和Python依赖
      run: |
        pip install --upgrade pip
        pip install buildozer cython

    - name: 列出项目目录
      run: ls -lR

    - name: 显示buildozer.spec内容
      run: cat buildozer.spec || echo "未找到buildozer.spec"

    - name: 若配置存在则跳过buildozer初始化
      run: echo "buildozer.spec已存在，跳过初始化"

    - name: 使用Buildozer构建APK
      run: |
        buildozer android ${{ github.event.inputs['build-type'] }} || true

    - name: 上传APK产物
      uses: actions/upload-artifact@v4
      with:
        name: worktime_apk
        path: bin/*.apk

    - name: 若存在构建日志则上传
      uses: actions/upload-artifact@v4
      with:
        name: build_logs
        path: ./.buildozer/android/platform/build/build.log
